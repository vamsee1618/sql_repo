##### 	Vamsee Krishna Reddy Narahari
#### Midterm

### DATABASE-1 

## QUESTION-1 
SELECT
	CHECK_NUM
    ,BOOK_NUM
    ,PAT_ID
    ,CHECK_OUT_DATE
    ,CHECK_DUE_DATE
FROM
	OACT.CHECKOUT
WHERE
	CHECKOUT.CHECK_IN_DATE IS NULL;

## QUESTION-2
SELECT
	COUNT(DISTINCT BOOK_SUBJECT)
FROM
	OACT.BOOK;

## QUESTION-3
SELECT
	BOOK_SUBJECT
    ,COUNT(BOOK_NUM) AS BOOK_COUNT
FROM 
	OACT.BOOK
GROUP BY
	BOOK_SUBJECT
ORDER BY
	BOOK_COUNT DESC
    ,BOOK_SUBJECT;

## QUESTION-4 
SELECT
	AU_ID
    ,COUNT(BOOK_NUM) AS TOTAL_BOOKS
FROM 
	OACT.WRITES
GROUP BY
	AU_ID
ORDER BY
	TOTAL_BOOKS DESC
    ,AU_ID;

## QUESTION 5
SELECT
	CHECKOUT.BOOK_NUM
    ,COUNT(CHECK_NUM) AS COUNT_CHECKOUT
FROM
	OACT.CHECKOUT
INNER JOIN 
	OACT.BOOK 
ON 
	CHECKOUT.BOOK_NUM = BOOK.BOOK_NUM
WHERE
	CHECKOUT.CHECK_IN_DATE IS NOT NULL
GROUP BY
	CHECKOUT.BOOK_NUM
ORDER BY
	COUNT_CHECKOUT DESC
	,BOOK_NUM DESC;

## QUESTION-6
SELECT
	CHECKOUT.PAT_ID
    ,PATRON.PAT_LNAME
    ,COUNT(BOOK_NUM) AS TOTAL_COUNT
    ,COUNT(DISTINCT BOOK_NUM) AS TOTAL_DISTINCT_COUNT
FROM
	OACT.CHECKOUT
INNER JOIN
	OACT.PATRON
ON 
	CHECKOUT.PAT_ID = PATRON.PAT_ID
GROUP BY
	CHECKOUT.PAT_ID
    ,PATRON.PAT_LNAME
HAVING
	COUNT(BOOK_NUM) >= 3
ORDER BY
	TOTAL_DISTINCT_COUNT DESC
    ,TOTAL_COUNT DESC
    ,CHECKOUT.PAT_ID;



## QUESTION 7
SELECT 
	PAT_ID
    ,AVG(DATEDIFF(CHECK_IN_DATE,CHECK_OUT_DATE)) AS AVG_DAYS
FROM 
	OACT.CHECKOUT 
GROUP BY
	PAT_ID
HAVING
	COUNT(CHECK_NUM) >= 3
ORDER BY
	AVG_DAYS DESC;


	
### DATABASE-2 

## QUESTION 1

SELECT
	INVOICE_NUMBER
    ,INVOICE_DATE
    ,INVOICE_TOTAL
FROM 
	ACCOUNTSPAYABLE.INVOICES
INNER JOIN
	ACCOUNTSPAYABLE.VENDORS
ON 
	INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
WHERE
	VENDORS.VENDOR_STATE LIKE 'CA';
    
## AND
SELECT
	INVOICE_NUMBER
    ,INVOICE_DATE
    ,INVOICE_TOTAL
FROM 
	ACCOUNTSPAYABLE.INVOICES
WHERE
	VENDOR_ID IN (SELECT VENDOR_ID FROM ACCOUNTSPAYABLE.VENDORS WHERE VENDORS.VENDOR_STATE LIKE 'CA');
    
## QUESTION-2
SELECT
	VENDORS.VENDOR_ID
    ,VENDORS.VENDOR_NAME
    ,VENDORS.VENDOR_STATE
FROM
	ACCOUNTSPAYABLE.VENDORS
LEFT JOIN
	ACCOUNTSPAYABLE.INVOICES
ON 
	INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
WHERE
	INVOICES.INVOICE_ID IS NULL;
    
## AND 
SELECT
	VENDORS.VENDOR_ID
    ,VENDORS.VENDOR_NAME
    ,VENDORS.VENDOR_STATE
FROM
	ACCOUNTSPAYABLE.VENDORS
WHERE
	VENDORS.VENDOR_ID NOT IN (SELECT VENDOR_ID FROM ACCOUNTSPAYABLE.INVOICES);

## AND 
SELECT
	VENDORS.VENDOR_ID
    ,VENDORS.VENDOR_NAME
    ,VENDORS.VENDOR_STATE
FROM
	ACCOUNTSPAYABLE.VENDORS
WHERE
	NOT EXISTS (SELECT VENDOR_ID FROM ACCOUNTSPAYABLE.INVOICES WHERE VENDORS.VENDOR_ID = INVOICES.VENDOR_ID);
    
## QUESTION-3 
SELECT
	VENDORS.VENDOR_NAME
    ,INVOICES.INVOICE_NUMBER
    ,INVOICES.INVOICE_TOTAL
FROM
	ACCOUNTSPAYABLE.VENDORS
INNER JOIN
	ACCOUNTSPAYABLE.INVOICES
ON 
	INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
WHERE
	INVOICE_TOTAL >
					(SELECT
						MAX(INVOICE_TOTAL)
					FROM
						ACCOUNTSPAYABLE.VENDORS
					INNER JOIN
						ACCOUNTSPAYABLE.INVOICES
					ON 
						INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
					WHERE
						VENDORS.VENDOR_ID = 34);
                        
## AND 
SELECT
	VENDORS.VENDOR_NAME
    ,INVOICES.INVOICE_NUMBER
    ,INVOICES.INVOICE_TOTAL
FROM
	ACCOUNTSPAYABLE.VENDORS
INNER JOIN
	ACCOUNTSPAYABLE.INVOICES
ON 
	INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
INNER JOIN
	(SELECT
						MAX(INVOICE_TOTAL) AS MAX_INVOICE
					FROM
						ACCOUNTSPAYABLE.VENDORS
					INNER JOIN
						ACCOUNTSPAYABLE.INVOICES
					ON 
						INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
					WHERE
						VENDORS.VENDOR_ID = 34) AS COND
ON 
	INVOICES.INVOICE_TOTAL > MAX_INVOICE;
	
## QUESTION-4 
## For the largest invoice	
SELECT 
	I4.*
    , I5.LARGESTINVOICE 
FROM
	(SELECT 
		I2.VENDOR_STATE
        , I3.VENDOR_ID 
	 FROM
		(SELECT 
			I1.VENDOR_STATE
            , MAX(I1.INVTOT) AS INVTOTS 
		 FROM
			(SELECT 
				I.VENDOR_ID
                , V.VENDOR_STATE
                ,SUM(I.INVOICE_TOTAL) AS INVTOT 
			FROM 
				ACCOUNTSPAYABLE.INVOICES I
			INNER JOIN 
				ACCOUNTSPAYABLE.VENDORS V
			ON 
				I.VENDOR_ID = V.VENDOR_ID
			GROUP BY I.VENDOR_ID, V.VENDOR_STATE) I1
			GROUP BY VENDOR_STATE) I2
INNER JOIN
			(SELECT I.VENDOR_ID, SUM(I.INVOICE_TOTAL) AS INVTOT FROM ACCOUNTSPAYABLE.INVOICES I
			GROUP BY I.VENDOR_ID) I3
ON I2.INVTOTS = I3.INVTOT) I4
INNER JOIN
(SELECT VENDOR_ID, MAX(INVOICE_TOTAL) AS LARGESTINVOICE FROM ACCOUNTSPAYABLE.INVOICES GROUP BY VENDOR_ID) I5
ON
I4.VENDOR_ID = I5.VENDOR_ID;

## For the maximum  invoice 
SELECT 
	VENDOR_STATE
    ,MAX(TOTAL_VENDOR_INVOICE) AS MAX_VENDOR_INVOICE
FROM 
(SELECT
	INVOICES.VENDOR_ID
    ,VENDORS.VENDOR_STATE
    ,SUM(INVOICES.INVOICE_TOTAL) AS TOTAL_VENDOR_INVOICE
FROM
	ACCOUNTSPAYABLE.VENDORS
INNER JOIN
	ACCOUNTSPAYABLE.INVOICES
ON 
	INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
GROUP BY
	INVOICES.VENDOR_ID
    ,VENDORS.VENDOR_STATE) AS TOTAL_TABLE
GROUP BY
	VENDOR_STATE;



## QUESTION-5

SELECT
	INVOICES.VENDOR_ID
    ,VENDORS.VENDOR_NAME
    ,COUNT(DISTINCT INVOICE_LINE_ITEMS.ACCOUNT_NUMBER)
FROM
	ACCOUNTSPAYABLE.VENDORS
INNER JOIN
	ACCOUNTSPAYABLE.INVOICES
ON 
	INVOICES.VENDOR_ID = VENDORS.VENDOR_ID
INNER JOIN
	ACCOUNTSPAYABLE.INVOICE_LINE_ITEMS
ON 
	INVOICE_LINE_ITEMS.INVOICE_ID = INVOICES.INVOICE_ID
GROUP BY
	INVOICES.VENDOR_ID
HAVING 
	COUNT(DISTINCT INVOICE_LINE_ITEMS.ACCOUNT_NUMBER)> 1;

## QUESTION-6
SELECT
	VENDOR_ID
	,TERMS_ID
    ,MAX(LAST_PAYMENT) AS LAST_PAYMENT_DATE
    ,SUM(TOTAL_INVOICE - TOTAL_PAYMENT - TOTAL_CREDIT) AS AMOUNT_DUE
FROM (SELECT 
		IF(GROUPING(TERMS_ID),"GRAND TOTAL",TERMS_ID) AS TERMS_ID
	,IF(GROUPING(VENDOR_ID),"TERMS TOTAL",VENDOR_ID) AS VENDOR_ID
	,MAX(PAYMENT_DATE) AS LAST_PAYMENT
    ,SUM(INVOICE_TOTAL) AS TOTAL_INVOICE
    ,SUM(PAYMENT_TOTAL) AS TOTAL_PAYMENT
    ,SUM(CREDIT_TOTAL) AS TOTAL_CREDIT
FROM 
	ACCOUNTSPAYABLE.INVOICES
GROUP BY
	VENDOR_ID
	,TERMS_ID) AMOUNT_DUE_TABLE
GROUP BY
	TERMS_ID
	, VENDOR_ID WITH ROLLUP;
    



