### Homework-3 
## Vamsee Narahari

## Question-1
SELECT
	CUSTOMERS.CUSTOMERID
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,MUSICAL_STYLES.STYLENAME
    ,COUNT(MUSICAL_PREFERENCES.STYLEID) OVER(PARTITION BY CUSTOMERS.CUSTOMERID RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS TOTAL_NUMBEROF_PREFERENCES
FROM 
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS 
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MUSICAL_PREFERENCES
ON 
	CUSTOMERS.CUSTOMERID = MUSICAL_PREFERENCES.CUSTOMERID
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MUSICAL_STYLES
ON 
	MUSICAL_STYLES.STYLEID = MUSICAL_PREFERENCES.STYLEID;
    
## QUESTION-2
SELECT
	CUSTOMERS.CUSTOMERID
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,MUSICAL_STYLES.STYLENAME
    ,COUNT(MUSICAL_PREFERENCES.STYLEID) OVER(PARTITION BY CUSTOMERS.CUSTOMERID) AS TOTAL_NUMBEROF_PREFERENCES
	,COUNT(MUSICAL_PREFERENCES.STYLEID) OVER(ORDER BY CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME)) AS TOTAL_NUMBEROF_PREFERENCES
FROM 
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS 
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MUSICAL_PREFERENCES
ON 
	CUSTOMERS.CUSTOMERID = MUSICAL_PREFERENCES.CUSTOMERID
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MUSICAL_STYLES
ON 
	MUSICAL_STYLES.STYLEID = MUSICAL_PREFERENCES.STYLEID
;

## QUESTION-3 
WITH CTE AS
(
SELECT
	CUSTOMERS.CUSTOMERID
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,CUSTCITY
    ,COUNT(MUSICAL_PREFERENCES.CUSTOMERID) AS PREFERENCES_COUNT
FROM 
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS 
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MUSICAL_PREFERENCES
ON 
	CUSTOMERS.CUSTOMERID = MUSICAL_PREFERENCES.CUSTOMERID
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MUSICAL_STYLES
ON 
	MUSICAL_STYLES.STYLEID = MUSICAL_PREFERENCES.STYLEID
GROUP BY
	CUSTOMERS.CUSTOMERID
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME)
    ,CUSTCITY
)
SELECT
	*
    ,SUM(PREFERENCES_COUNT) OVER(PARTITION BY CUSTCITY ORDER BY CUSTOMER_NAME) AS RUNNING_TOTAL_CITY
FROM 
	CTE;



## QUESTION-4
SELECT
	CUSTOMERID
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,CUSTCITY
    ,CUSTSTATE
    ,ROW_NUMBER() OVER(ORDER BY CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME)) AS CUSTOMER_ROW_NUMBER
FROM 
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS
ORDER BY
	CUSTOMER_NAME;

## QUESTION-5
SELECT
	CUSTOMERID
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,CUSTCITY
    ,CUSTSTATE
    ,ROW_NUMBER() OVER(PARTITION BY CUSTSTATE,CUSTCITY ORDER BY CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME)) AS CUSTOMER_ROW_NUMBER
FROM 
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS
ORDER BY 
	CUSTOMER_NAME;

## QUESTION-6
SELECT
	ENGAGEMENTS.STARTDATE
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,ENTERTAINERS.ENTSTAGENAME
    ,DENSE_RANK() OVER(ORDER BY ENGAGEMENTS.ENTERTAINERID) AS ENT_NUM
    ,ROW_NUMBER() OVER(PARTITION BY STARTDATE ORDER BY ENGAGEMENTS.ENTERTAINERID) AS START_DATE_ROW
FROM
	ENTERTAINMENTAGENCYEXAMPLE.ENGAGEMENTS
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS
ON
	ENGAGEMENTS.CUSTOMERID = CUSTOMERS.CUSTOMERID
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.ENTERTAINERS
ON
	ENGAGEMENTS.ENTERTAINERID = ENTERTAINERS.ENTERTAINERID;

## QUESTION-7
WITH CTE AS
(
SELECT
	ENTERTAINERS.ENTERTAINERID
    ,COUNT(ENGAGEMENTS.ENTERTAINERID) AS COUNT_ENG
FROM
	ENTERTAINMENTAGENCYEXAMPLE.ENTERTAINERS
LEFT JOIN
	ENTERTAINMENTAGENCYEXAMPLE.ENGAGEMENTS
ON
	ENTERTAINERS.ENTERTAINERID = ENGAGEMENTS.ENTERTAINERID 
GROUP BY
	ENTERTAINERS.ENTERTAINERID
)
SELECT
	*
    ,RANK() OVER(ORDER BY COUNT_ENG DESC) AS RANKING_ORDER
    ,NTILE(3) OVER(ORDER BY COUNT_ENG DESC) AS BUCKET_COUNT
FROM
	CTE;

## QUESTION-8

WITH CTE AS 
(
SELECT
	CONCAT(AGENTS.AGTFIRSTNAME,", ",AGENTS.AGTLASTNAME) AS AGENT_NAME
    ,AGENTS.AGENTID
    ,SUM(ENGAGEMENTS.CONTRACTPRICE) AS TOTAL_DOLLARS
FROM
	ENTERTAINMENTAGENCYEXAMPLE.AGENTS
LEFT JOIN 
	ENTERTAINMENTAGENCYEXAMPLE.ENGAGEMENTS
ON
	AGENTS.AGENTID = ENGAGEMENTS.AGENTID
GROUP BY
	CONCAT(AGENTS.AGTFIRSTNAME,", ",AGENTS.AGTLASTNAME)
    ,AGENTS.AGENTID
)
SELECT
	*
    ,RANK() OVER(ORDER BY TOTAL_DOLLARS DESC) AS AGENT_RANK
FROM
	CTE;

# QUESTION-9
SELECT
	ENGAGEMENTS.STARTDATE
    ,CONCAT(CUSTOMERS.CUSTFIRSTNAME,", ",CUSTOMERS.CUSTLASTNAME) AS CUSTOMER_NAME
    ,ENTERTAINERS.ENTSTAGENAME
    ,COUNT(ENGAGEMENTS.ENTERTAINERID) OVER(PARTITION BY ENGAGEMENTS.ENTERTAINERID) AS COUNT_ENTER
FROM
	ENTERTAINMENTAGENCYEXAMPLE.ENGAGEMENTS
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.CUSTOMERS
ON
	ENGAGEMENTS.CUSTOMERID = CUSTOMERS.CUSTOMERID
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.ENTERTAINERS
ON
	ENGAGEMENTS.ENTERTAINERID = ENTERTAINERS.ENTERTAINERID;

## QUESTION-10
SELECT
	ENTSTAGENAME
    ,CONCAT(MEMBERS.MBRFIRSTNAME,", ",(MEMBERS.MBRLASTNAME)) AS MEMBER_NAME
    ,ROW_NUMBER() OVER(PARTITION BY ENTSTAGENAME ORDER BY ENTERTAINER_MEMBERS.MEMBERID) AS MEMBER_ROW
FROM
	ENTERTAINMENTAGENCYEXAMPLE.ENTERTAINERS
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.ENTERTAINER_MEMBERS
ON 
	ENTERTAINERS.ENTERTAINERID = ENTERTAINER_MEMBERS.ENTERTAINERID
INNER JOIN
	ENTERTAINMENTAGENCYEXAMPLE.MEMBERS
ON
	MEMBERS.MEMBERID = ENTERTAINER_MEMBERS.MEMBERID;
	
## ACCOUNTS PAYABLE 

## QUESTION-1
SELECT
	VENDOR_ID
    ,INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL) AS BALANCE_DUE
    ,SUM(INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS TOTAL_BALANCE_DUE
    ,SUM(INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL)) OVER(PARTITION BY VENDOR_ID ORDER BY (INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL))  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RUNNING_TOTAL_BALANCE_DUE
FROM
	ACCOUNTSPAYABLE.INVOICES
WHERE
	INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL) !=0;

# QUESTION-2
SELECT
	VENDOR_ID
    ,INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL) AS BALANCE_DUE
    ,SUM(INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS TOTAL_BALANCE_DUE
    ,SUM(INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL)) OVER(PARTITION BY VENDOR_ID ORDER BY INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL) ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RUNNING_TOTAL_BALANCE_DUE
    ,AVG(INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL)) OVER(PARTITION BY VENDOR_ID ORDER BY INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL)  ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RUNNING_AVERAGE_BALANCE_DUE
FROM
	ACCOUNTSPAYABLE.INVOICES
WHERE
	INVOICE_TOTAL - (PAYMENT_TOTAL + CREDIT_TOTAL) !=0;
    
# QUESTION-3
WITH CTE AS
(
SELECT
	INVOICE_DATE
    ,SUM(INVOICE_TOTAL) AS INVOICE_TOTAL
FROM
	ACCOUNTSPAYABLE.INVOICES
GROUP BY
	INVOICE_DATE
)
SELECT
	INVOICE_DATE
    ,INVOICE_TOTAL
    ,AVG(INVOICE_TOTAL) OVER(ORDER BY INVOICE_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MOVING_AVG_3
FROM
	CTE
;
    
    
